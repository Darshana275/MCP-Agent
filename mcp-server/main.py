from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
import requests

app = FastAPI()

# Allow CORS for all origins (you can restrict in prod)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/analyze")
async def analyze(request: Request):
    body = await request.json()
    package_json = body.get("packageJson", {})
    dependencies = package_json.get("dependencies", {})

    # Generate prompt for the LLM
    prompt = "Analyze the following package.json dependencies for known vulnerabilities and risks:\n\n"
    if not dependencies:
        return {"vulnerabilities": "No dependencies found."}

    for dep, version in dependencies.items():
        prompt += f"- {dep}@{version}\n"

    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": "mistral",  # or "llama3", "gemma", etc.
                "prompt": prompt,
                "stream": False
            }
        )

        result = response.json()
        ai_response = result.get("response", "No response generated.")

        return {
            "vulnerabilities": ai_response.strip(),
            "explanation": "Generated by local LLM (Mistral via Ollama)"
        }

    except Exception as e:
        return {
            "error": f"Failed to generate response: {str(e)}"
        }
